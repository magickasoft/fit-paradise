import type { Metadata } from 'next'
import { ReactNode } from 'react'
import { Geist, Geist_Mono } from 'next/font/google'
import '../globals.css'
import { YandexMetricaProvider } from '@artginzburg/next-ym'
import StyledComponentsRegistry from '@/components/StyledComponentsRegistry'
import { notFound } from 'next/navigation'
import { Locale, hasLocale, NextIntlClientProvider } from 'next-intl'
// import { getTranslations, setRequestLocale } from 'next-intl/server'
import { setRequestLocale } from 'next-intl/server'
import { routing } from '@/i18n/routing'
import { Header } from '@/components/Header'

const geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] })
const geistMono = Geist_Mono({ variable: '--font-geist-mono', subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export interface LocaleLayoutProps {
  children: ReactNode
  params: Promise<{ locale: Locale }>
}

export function generateStaticParams() {
  return routing.locales.map(locale => ({ locale }))
}

// export async function generateMetadata(props: Omit<LocaleLayoutProps, 'children'>): Promise<{ title: string }> {
//   const { locale } = await props.params

//   const t = await getTranslations({ locale, namespace: 'localeLayout' })

//   return {
//     // title: t('title'),
//   }
// }

export default async function LocaleLayout({ children, params }: Readonly<LocaleLayoutProps>) {
  const { locale } = await params

  if (!hasLocale(routing.locales, locale)) {
    notFound()
  }

  setRequestLocale(locale)

  return (
    <html lang={locale}>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <NextIntlClientProvider>
          <StyledComponentsRegistry>
            <YandexMetricaProvider>
              <Header />
              {children}
            </YandexMetricaProvider>
          </StyledComponentsRegistry>
        </NextIntlClientProvider>
      </body>
    </html>
  )
}
